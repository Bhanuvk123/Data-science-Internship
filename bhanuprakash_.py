# -*- coding: utf-8 -*-
"""Bhanuprakash_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sSJYXziMnOmyBrb0whbNatS7aHEIwTqv

**Day9**
"""

import numpy as np
import matplotlib.pyplot as plt
korea_scores = (554,536,538)
canada_scores = (518,523,525)
china_scores = (413,570,580)
france_scores = (495,505,499)
index = np.arange(3)
bar_width = 0.2
k1 = plt.bar(index,korea_scores,bar_width,alpha = 0.9,label = 'korea')
c1 = plt.bar(index+bar_width,canada_scores,bar_width,alpha = 0.9,label = 'Canada')
ch1 = plt.bar(index+bar_width*2,china_scores,bar_width,alpha = 0.9,label = 'China')
f1 = plt.bar(index+bar_width*3,france_scores,bar_width,alpha = 0.9,label = 'France')
plt.xticks(index + 0.3,('Maths','Reading','Science'))
plt.ylabel('Mean scores in PISA 2021')
plt.xlabel('Subjects')
plt.title('Test scores by Country')
plt.grid(True)
plt.legend()

plt.bar([1,3,5,7,9],[5,2,7,8,2], label = 'Example one')
plt.bar([2,34,6,8,10],[8,6,2,5,6],label = 'Example two',color = 'green')
plt.legend()
plt.ylabel('bar width')
plt.xlabel('Bar Number')
plt.title('Epic Graph')

population_ages = [12,34,31,23,122,15,145,543,135,135,134,351,63,24,72,151,63,24,62,31]
bins = [10,20,30,40,50,60,70,80,90,100,110,120,130,140]
plt.hist(population_ages,bins,color = 'red')

x = [1,2,3,4,5,6,7,8]
y = [5,2,4,2,1,4,5,2]
plt.scatter(x,y,label = 'Scatter plot',color = 'r')
plt.ylabel('y')
plt.xlabel('x')
plt.title('Interesting Graph')
plt.legend()

"""**stackplot**"""

days = [1,2,3,4,5]
sleeping = [7,8,6,11,7]
eating = [2,3,4,3,2]
working = [7,8,7,2,2]
playing = [4,5,3,2,1]
plt.stackplot(days,sleeping,eating,working,playing,colors = ['m','c','r','k'])

"""**3D** **plot**"""

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = [4,2,7,5,7,9,5,4,3,5]

ax1.plot(x,y,z,c = 'g',marker = 'o')

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('ggplot')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = [4,2,7,5,7,9,5,4,3,5]

ax1.scatter(x,y,z,c = 'g',marker = 'o')

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x = [1,2,3,4,5,6,7,8,9,10]
y = [1,5,3,6,3,6,3,9,6,3]
z = np.zeros(10)

dx = np.ones(10)
dy = np.ones(10)
dz = [1,2,3,4,5,6,7,8,9,10]

ax1.bar3d(x,y,z,dx,dy,dz)

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')

from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
from matplotlib import style

style.use('fivethirtyeight')

fig = plt.figure()
ax1 = fig.add_subplot(111,projection = '3d')

x,y,z = axes3d.get_test_data()
ax1.plot_wireframe(x,y,z,rstride = 3,cstride = 3)

ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')



"""**Day8**"""

import numpy as np
import matplotlib.pyplot as plt
x = np.arange(0,3*np.pi,0.1)
y = np.sin(x)
plt.plot(x,y)

ar = np.array([1,2,3])
np.exp(ar)

ar = np.array([7,5,8])
np.exp(ar)

np.log(ar)

np.log10(ar)

!pip install matplotlib

import matplotlib.pyplot as plt
x = [2017,2018,2019,2020,2021]
y = [432,341,234,345,363]
plt.plot(x,y)

import matplotlib.pyplot as plt
x=["python","AI","Java","ML"]
y=[60.1,30.2,20.34,15.8]
plt.xlabel("c languages")
plt.ylabel("learning growth")
plt.bar(x,y)
plt.show()

years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
plt.plot(years,pops, color = 'red')
plt.ylabel("population in billions")
plt.xlabel('Population Growth by year')
plt.title('Population Growth')
plt.savefig('a.png')

x = [1,6,3]
y = [5,9,4]

x2 = [1,2,3]
y2 = [10,14,12]

plt.plot(x,y,label = 'First line')
plt.plot(x2,y2, label = 'Second Line')
plt.xlabel('PLot Nummber')
plt.ylabel('Important var')
plt.title('Interesting Graph!')
plt.legend()

years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
death =[1.1,3.2,1.0,2.1,1.4,1.2,1.7,2.1,2.5,2.3,2.4,1.7,1.9,1.5]
plt.plot(years,pops,'.',color = 'orange',label = 'Birth by year')
plt.plot(years,death,color = 'blue',label = 'Death by year')
plt.ylabel("Population in billions")
plt.xlabel('Population stat by year')
plt.title('Population Growth')
plt.legend()

years = [1950,1955,1960,1965,1970,1975,1980,1985,1990,1995,2000,2005,2010,2015]
pops = [1.2,3.4,2.3,3.2,3.5,2.1,2.1,2.4,1.0,1.3,1.5,1.7,2.3,1.9]
death =[1.1,3.2,1.0,2.1,1.4,1.2,1.7,2.1,2.5,2.3,2.4,1.7,1.9,1.5]
lines = plt.plot(years,pops,years,death)
plt.grid()
plt.setp(lines,color = 'green',marker = '*')

labels = ['Python','C','C#','PHP','Java','Ruby']
sizes = [33,52,12,17,42,48]
plt.pie(sizes, labels = labels,autopct = '%1.1f%%')
plt.axis('equal')

import pandas as pd
raw_data = {'names':['Nick','Sani','John','Rubi','Maya'],
            'jan_ir':[123,124,125,126,128],
            'feb_ir':[23,24,25,27,29],
            'March_ir':[3,5,7,6,9]}
df = pd.DataFrame(raw_data,columns = ['names','jan_ir','feb_ir','march_ir'])

df





"""**Day7**"""

!pip install numpy

import numpy as np

a=np.empty((3,2,1))
a

np.empty((1))

np.zeros((3,2,1))

a = np.arange(2,10)
type(a)

np.linspace(1,10,5)

np.linspace(2,9)

np.logspace(2,9)

np.random.rand(2,2,2)

d = np.random.randint(0,10,size = (5,5))
d

d[:,:]

d[:]

d[2:5,1:3]

d[:,2]

0.33650024-1.2

1.18367347 - 1.0

1.36734694 - 1.18367347

a = np.random.randint(0,10,size = (6,6))
b = np.random.randint(0,10,size = (6,6))
a

b

np.vstack([a,b])

np.hstack([a,b])

d

d1,d2 = np.vsplit(d,[1])
d1
d2

d.shape

d.ndim

d.size

d.reshape(25,1)

d.reshape(-2,1)

a = np.array([(4,5,6),(4,5,6)])
a

import time
import sys

s = range(4000)
print(sys.getsizeof(9)*len(s))

D = np.arange(4000)

print(D.size*D.itemsize)

a.sum(axis = 0)

np.sqrt(a)

np.std(a)

np.mean(a)

b = np.array([(8,7,6),(4,6,7)])
a

b

print(a+b)

a.ravel()

print(a*b)

"""**Day6**"""

!pip3 install pandas



import pandas as pd

!pip install numpy

import pandas as pd
s1=pd.Series([1,3,4,5,6,2,9])
s2=pd.Series([1.1,3.5,4.7,5.8,2.9,9.3])
s3=pd.Series(["a","b","c","d","e"])
Data={"first":s1,"second":s2,"third":s3}
dfseries=pd.DataFrame(Data)
print(Data)

df.to_csv("basic.csv")

a=pd.read_csv("basic.csv")
print(a)

import pandas as pd
data=[1,2,3,4,5,6,7]
d=pd.Series(data)
print(d)

data=[1,2,3,4,5,6,7,"m"]
d=pd.Series(data)
print(d)

import numpy as np
s=pd.Series([1,2,3,np.nan,8,9])
print(s)

d=pd.date_range('20220522',periods=10)
print(d)

df=pd.DataFrame({"A":[1,2,3,4],
                 "B":pd.Timestamp("20220522"),
                 "C":pd.Series(1,index=list(range(4))),
                 "D":np.array([5]*4,dtype="int32"),
                 "E":pd.Categorical(["test","train","train","test"])})

df

type(df)

df.dtypes

df.head()

df.tail()

df.tail(2)

df.columns

df.describe()

df.sort_index(axis=1,ascending=False)

df.sort_values(by="A")

df["C"]

df[1:4]

df.loc[:,["A","C"]]

df.loc[:,:]

df.iloc[0:2,3:5]

df[df["A"]>0]

df=pd.Series([1,2,3,np.nan,4,5]).shift(2)

df

df.apply(np.cumsum)

df.value_counts

df.value_counts()

s=pd.Series(["education","jupiter","python",np.nan])

s.str.upper()

s.str.lower()

data=[1,2,2,3,4,5,"m"]
d=pd.Series(data)
df=pd.DataFrame(d)
print(df)

import pandas as pd
s1=pd.Series([1,3,4,5,6,2,9])
s2=pd.Series([1.1,3.5,4.7,5.8,2.9,9.3])
s3=pd.Series(["a","b","c","d","e"])
Data={"first":s1,"second":s2,"third":s3}
dfseries=pd.DataFrame(Data)
print(Data)

df.to_csv("basic.csv")

a=pd.read_csv("basic.csv")
print(a)

"""**Day5**"""

def eo(x):
  if (x%2==0):
    print("even")
  else:
      print("odd")

eo(1235)

def square_value(num):
  return num**2
print(square_value(2))

"""**to**-**do**"""

list1=[1,2,3,4,5,"iq",2,3,5,"level",4,5,"planet",6,7]
list1.remove("level")
print(list1)
list1.remove("iq")
list1.remove("planet")
print(list1)

sum=0
for i in list1:
  sum=sum+i
print(sum)

""" **lamda** **functions**"""

x = lambda a:a+5
print(x(22))

def db(n):
  return lambda x:x*n
num_double=db(2)
print(num_double(11))

print('08','04','2022',sep='/')



"""**zip** **code**"""

questions=["name","colcor","shape"]
answers=["apple","red","a circle"]
for question, answer in zip(questions,answers):
  print('what is your{0}? i am {1} .'. format(question,answer))

l=list(input().split())

n=int(input())
a=list(map(int,input().strip()))

print(a)

a=list(map(int, input().split(' ')))

print(a)
sum(a)



"""**Day4**"""

L=[1,2,3,4]
for var in L:
  print(var)

"""**else-if**"""

i=20
if(i==20):
  print("i is equal to 20")
  print("i is in if block")
elif(i==15):
  print("i is 15")
  print("i is in elif(1) block")
elif(i==5):
  print("i is 5")
  print("i is in elif(2) block")
else:
  print("i is equal to nothing")
  print("i is in else block")

"""**short** **hand** if-**statement**"""

i=10
if i==10: print("i is equal eo 10")

"""to-**do**"""

i>=10
if i<5: print("i is less than 5")
else: print("i is greater tha or equal to 10")

"""for **loop**"""

li=[1,2,3,4,5,6]
for i in li:
  i=i+1
  print(i)

l=["tomato","onion","brinjal","banana"]
for i in l:
  for j in i:
   print(j)

ab=["tomato","onion","brinjal","banana"]
for i in ab:
 for j in i:
    print(j)

"""**to**-**do**"""

new_ab=["potato"]
ab.pop(3)
ab.insert(3,"carrot")
new_ab=ab
print(new_ab)

li=["chilli","pumpkin","banana"]
new_li=[i.replace("banana","carrot")for i in li]
print(new_li)

s=str(input())

s=list(input())

print(s)

"""**to**-**do**"""

s=list(input())
print(''.join(s))

s=str(input())
for i in s:
  print(i)

d=dict()
d["galaxy"]="milkyway"
d["star"]="sun"
for i in d:
  print(i,d[i])

for letter in "blackholehasmoregravity":
  if letter=="a" or letter=="h":
    pass
  print("current letter", letter)

for letter in "blackholehasmoregravity":
  if letter=="h" or letter=="y":
    break
  print( letter)

list(range(2,12,3))

for i in range(10):
  print(i)

"""**range** **function**"""

l=[10,20,30,40]
for i in range(len(l)):
  print(l[i], end = " ")
print()

"""**to**-**do**"""

sum=0
for i in range(1,11):
  sum=sum+i
print(sum)

count=0
while(count<3):
  count+=2
  print("hello")

a=[1,2,3,4]
while a:
  print(a.pop())

i=0
a="helloworld"
while i<len(a):
  if a[i]=="e":
    i+=1
    break
    print("current letter",a[i])
    i+=1

i=0
a="helloworld"
while i<len(a):
  if a[i]=="e":
    i+=1
    continue
  print("current letter",a[i])
  i+=1



"""**Day3**"""

tuple1=('ram','krishna','sagar')
tuple1[2]

dict={"name":"bhanu","age":22}
del dict["name"]
print(dict)

list=['earth','moon','light','sky']
list[2]

list[1:3]

tuple1=(1,2,3)
tuple2=("abc","def","hello world")
tuple3=tuple1+tuple2
print(tuple3)

tup=tuple("hello world")
print(tup)

"""#to-do"""

tup1=tuple("data")
tup2=tuple("science")
tup3=tup1+tup2
print(tup3)

tup1*3

Tu=tuple("hello",)*3
print(Tu)

"""tuple **unpacking**"""

tuple4=("hello","good","people")
a,b,c=tuple4
print(a)
print(b)
print(c)

dic={"name":"Bhanu"}
dic["clg"]="bmsit"
dic["age"]=22

dic.pop("clg")

print(dic)

"""nested **dictionary**"""

di={"dict1":{1:"get"},"dict2":{"name":"call"}}
di["dict2"]["name"]

a,b=di["dict1"][1],di["dict2"]["name"]
print(a,b)

di.clear()
print(di)

"""**conditional** **statement**"""

string="parade"
if string=="parade":
  print("hello")
else:
  string=string*3
  print(string)

i=30
if (i>45):
  print("i is greater")
  print("i is in if block")
else:
  print("i is smaller")
  print("i is in else block")

i=50
if(i==50):
  if(i<25):
    print("i is less than 25")
    if(i<40):
      print("i is less than 40 ")
  else:
        print("i is equal to 50")

"""# Append"""

ap=[1,2,3,4]
ap.append(6)
print(ap)

"""**insert**"""

ins=[2,3,4,5,6,]
ins.insert(3,4)
print(ins)

ins=[3,4,5,6,7,8,9]
ins.insert(8,37)
print(ins)
ins.insert(2,12)
print(ins)
ins.insert(5,100)
print(ins)

"""**extend**"""

ex1=[1,2,3,4]
ex2=[4,5,6,7]
ex1.extend(ex2)
ex2.extend(ex1)
print(ex1,ex2)

"""**sum**"""

print(sum(ex1))

"""count"""

count1=[1,2,3,4,4,4,5,5,6,3,2,4,5,4,2]
print(count1.count(4))

"""**indexing**"""

In=[3,4,5,6,7,8]
In.index(4)



"""**min**"""

min(In)

max(In)

pop1=[2,3,4,5,6]
pop1.pop(3)
print(pop1)

delete=[2,3,4,5]
del delete[3]
print(delete)

a=12
b=3
c=45

x=a

a=c
c=b
b=x

print(a)
print(b)
print(c)

name='dlithe'
course='Data science'
name.capitalize()

name.find('e')

name.isalpha()

name.islower()

name.isupper()



name.upper()

ab='dark is a series'
ab.split()

a='game of thrones '
b=' dark'
a+b

ab*4

str='data science'
len(str)

str.replace('d','D')

str[3:6]

"""## *Day1*
Data **types**



"""

type(2)

type(1.2)

type('123')



"""**LIst**"""

li=['str',1,2,3,1.1,23]
type(['str',1,2,3,1.1,23])



"""**Tuple**"""

tu=(23,34,'ram')
type((23,34,'ram'))



"""**Dictionary**"""

{'name':'bhanu','age':22,'clg':'bmsit'}
type({'name':'bhanu','age':22,'clg':'bmsit'})

"""**operators**
Arithmetic 
"""

print(2+2)
print(4-2)
print(4/2)
print(6//2)
print(3**3)

"""**Relational**"""

23>45

"""**logical**"""

23>45 and 49==49

23>45 or 49==49

not('bhanu'=='Bhanu')

"""**Assaignment**"""

a=12
a+=12
print(a)